
--[[
    github: https://github.com/LorekeeperZinnia/Dex
    
    New Dex
    Final Version
    Developed by Moon
    Modified for Infinite Yield
    
    Dex is a debugging suite designed to help the user debug games and find any potential vulnerabilities.
]]

    

local cloneref = cloneref or (function(...) return ... end)
local getnilinstances = getnilinstances or (function() return {} end)

local nodes, service = {}, setmetatable({}, {
    __index = function(self, name)
        local serv = cloneref(game:GetService(name))
        self[name] = serv
        return serv
    end
})

local selection = nil;

local EmbeddedModules = {
Explorer = function()
--[[
    Explorer App Module
    
    The main explorer interface
]]

-- Common Locals

local Decompile do
    local Success, Decompile_Source = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/w-a-e/Advanced-Decompiler-V3/main/init.lua", true)
    end)
    
    if Success then
        local CONSTANTS = [[
local ENABLED_REMARKS = {
    NATIVE_REMARK = true,
    INLINE_REMARK = true
}

local DECOMPILER_TIMEOUT = 10

local READER_FLOAT_PRECISION = 7 -- up to 99
local SHOW_INSTRUCTION_LINES = false
local SHOW_REFERENCES = true
local SHOW_OPERATION_NAMES = false
local SHOW_MISC_OPERATIONS = false
local LIST_USED_GLOBALS = true
local RETURN_ELAPSED_TIME = false]]
        
        xpcall(function()
            return loadstring(
                string.gsub(
                    string.gsub(
                        Decompile_Source, "return %(x %% 2^32%) // %(2^disp%)", "return math.floor((x %% 2^32) / (2^disp))", 1
                    ), ";;CONSTANTS HERE;;", CONSTANTS
                ), "Advanced-Decompiler-V3"
            )()
        end, warn)
        
        -- local HttpService = service.HttpService
        
        local _ENV = (getgenv or getrenv or getfenv)()
        Decompile = _ENV.decompile
        
        --[[local request = request or http_request or (syn and syn.request)
        
        local cleanScript = function(ucScript, cUrl)
            local Url = (cUrl or "http://localhost:5000/fix_script")
            
            local result = request({
                Url = Url,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode({ script = ucScript })
            })
            
            return (result.Success and result.fixed_script) or nil
        end
        
        local BetterDecompiler = function(Source, Enabled, cUrl)
            local Success, result = pcall(function()
                return Decompile(Source)
            end)
            
            if Success and result then
                if Enabled then
                    local _Success, _result = pcall(cleanScript, Source, cUrl)
                    
                    if _Success and _result then
                        return _result
                    end
                end
                return result
            end
        end
        
        _ENV.decompile = function(Source)
            return BetterDecompiler(Source, true)
        end]]
    end
end

local Main,Lib,Apps,Settings -- Main Containers
local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
local API,RMD,env,service,plr,create,createSimple -- Main Locals

local function initDeps(data)
    Main = data.Main
    Lib = data.Lib
    Apps = data.Apps
    Settings = data.Settings

    API = data.API
    RMD = data.RMD
    env = data.env
    service = data.service
    plr = data.plr
    create = data.create
    createSimple = data.createSimple
end

local function initAfterMain()
    Explorer = Apps.Explorer
    Properties = Apps.Properties
    ScriptViewer = Apps.ScriptViewer
    Notebook = Apps.Notebook
end

local function main()
    local Explorer = {}
    local tree,listEntries,explorerOrders,searchResults,specResults = {},{},{},{},{}
    local expanded
    local entryTemplate,treeFrame,toolBar,descendantAddedCon,descendantRemovingCon,itemChangedCon
    local ffa = game.FindFirstAncestorWhichIsA
    local getDescendants = game.GetDescendants
    local getTextSize = service.TextService.GetTextSize
    local updateDebounce,refreshDebounce = false,false
    local nilNode = {Obj = Instance.new("Folder")}
    local idCounter = 0
    local scrollV,scrollH,clipboard
    local renameBox,renamingNode,searchFunc
    local sortingEnabled,autoUpdateSearch
    local table,math = table,math
    local nilMap,nilCons = {},{}
    local connectSignal = game.DescendantAdded.Connect
    local addObject,removeObject,moveObject = nil,nil,nil
    
    addObject = function(root)
        if nodes[root] then return end
        
        local isNil = false
        local rootParObj = ffa(root,"Instance")
        local par = nodes[rootParObj]
        
        -- Nil Handling
        if not par then
            if nilMap[root] then
                nilCons[root] = nilCons[root] or {
                    connectSignal(root.ChildAdded,addObject),
                    connectSignal(root.AncestryChanged,moveObject),
                }
                par = nilNode
                isNil = true
            else
                return
            end
        elseif nilMap[rootParObj] or par == nilNode then
            nilMap[root] = true
            nilCons[root] = nilCons[root] or {
                connectSignal(root.ChildAdded,addObject),
                connectSignal(root.AncestryChanged,moveObject),
            }
            isNil = true
        end
        
        local newNode = {Obj = root, Parent = par}
        nodes[root] = newNode
        
        -- Automatic sorting if expanded
        if sortingEnabled and expanded[par] and par.Sorted then
            local left,right = 1,#par
            local floor = math.floor
            local sorter = Explorer.NodeSorter
            local pos = (right == 0 and 1)
            
            if not pos then
                while true do
                    if left >= right then
                        if sorter(newNode,par[left]) then
                            pos = left
                        else
                            pos = left+1
                        end
                        break
                    end
                    
                    local mid = floor((left+right)/2)
                    if sorter(newNode,par[mid]) then
                        right = mid-1
                    else
                        left = mid+1
                    end
                end
            end
            
            table.insert(par,pos,newNode)
        else
            par[#par+1] = newNode
            par.Sorted = nil
        end

        local insts = getDescendants(root)
        for i = 1,#insts do
            local obj = insts[i]
            if nodes[obj] then continue end -- Deferred
            
            local par = nodes[ffa(obj,"Instance")]
            if not par then continue end
            local newNode = {Obj = obj, Parent = par}
            nodes[obj] = newNode
            par[#par+1] = newNode

            -- Nil Handling
            if isNil then
                nilMap[obj] = true
                nilCons[obj] = nilCons[obj] or {
                    connectSignal(obj.ChildAdded,addObject),
                    connectSignal(obj.AncestryChanged,moveObject),
                }
            end
        end

        if searchFunc and autoUpdateSearch then
            searchFunc({newNode})
        end

        if not updateDebounce and Explorer.IsNodeVisible(par) then
            if expanded[par] then
                Explorer.PerformUpdate()
            elseif not refreshDebounce then
                Explorer.PerformRefresh()
            end
        end
    end
    
    removeObject = function(root)
        local node = nodes[root]
        if not node then return end

        -- Nil Handling
        if nilMap[node.Obj] then
            moveObject(node.Obj)
            return
        end

        local par = node.Parent
        if par then
            par.HasDel = true
        end

        local function recur(root)
            for i = 1,#root do
                local node = root[i]
                if not node.Del then
                    nodes[node.Obj] = nil
                    if #node > 0 then recur(node) end
                end
            end
        end
        recur(node)
        node.Del = true
        nodes[root] = nil

        if par and not updateDebounce and Explorer.IsNodeVisible(par) then
            if expanded[par] then
                Explorer.PerformUpdate()
            elseif not refreshDebounce then
                Explorer.PerformRefresh()
            end
        end
    end
    
    moveObject = function(obj)
        local node = nodes[obj]
        if not node then return end

        local oldPar = node.Parent
        local newPar = nodes[ffa(obj,"Instance")]
        if oldPar == newPar then return end

        -- Nil Handling
        if not newPar then
            if nilMap[obj] then
                newPar = nilNode
            else
                return
            end
        elseif nilMap[newPar.Obj] or newPar == nilNode then
            nilMap[obj] = true
            nilCons[obj] = nilCons[obj] or {
                connectSignal(obj.ChildAdded,addObject),
                connectSignal(obj.AncestryChanged,moveObject),
            }
        end

        if oldPar then
            local parPos = table.find(oldPar,node)
            if parPos then table.remove(oldPar,parPos) end
        end

        node.Id = nil
        node.Parent = newPar

        if sortingEnabled and expanded[newPar] and newPar.Sorted then
            local left,right = 1,#newPar
            local floor = math.floor
            local sorter = Explorer.NodeSorter
            local pos = (right == 0 and 1)

            if not pos then
                while true do
                    if left >= right then
                        if sorter(node,newPar[left]) then
                            pos = left
                        else
                            pos = left+1
                        end
                        break
                    end

                    local mid = floor((left+right)/2)
                    if sorter(node,newPar[mid]) then
                        right = mid-1
                    else
                        left = mid+1
                    end
                end
            end

            table.insert(newPar,pos,node)
        else
            newPar[#newPar+1] = node
            newPar.Sorted = nil
        end

        if searchFunc and searchResults[node] then
            local currentNode = node.Parent
            while currentNode and (not searchResults[currentNode] or expanded[currentNode] == 0) do
                expanded[currentNode] = true
                searchResults[currentNode] = true
                currentNode = currentNode.Parent
            end
        end

        if not updateDebounce and (Explorer.IsNodeVisible(newPar) or Explorer.IsNodeVisible(oldPar)) then
            if expanded[newPar] or expanded[oldPar] then
                Explorer.PerformUpdate()
            elseif not refreshDebounce then
                Explorer.PerformRefresh()
            end
        end
    end
    
    Explorer.ViewWidth = 0
    Explorer.Index = 0
    Explorer.EntryIndent = 20
    Explorer.FreeWidth = 32
    Explorer.GuiElems = {}
    
    Explorer.InitRenameBox = function()
        renameBox = create({{1,"TextBox",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.062745101749897,0.51764708757401,1),BorderMode=2,ClearTextOnFocus=false,Font=3,Name="RenameBox",PlaceholderColor3=Color3.new(0.69803923368454,0.69803923368454,0.69803923368454),Position=UDim2.new(0,26,0,2),Size=UDim2.new(0,200,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,Visible=false,ZIndex=2}}})
        
        renameBox.Parent = Explorer.Window.GuiElems.Content.List
        
        renameBox.FocusLost:Connect(function()
            if not renamingNode then return end
            
            pcall(function() renamingNode.Obj.Name = renameBox.Text end)
            renamingNode = nil
            Explorer.Refresh()
        end)
        
        renameBox.Focused:Connect(function()
            renameBox.SelectionStart = 1
            renameBox.CursorPosition = #renameBox.Text + 1
        end)
    end

    Explorer.SetRenamingNode = function(node)
        renamingNode = node
        renameBox.Text = tostring(node.Obj)
        renameBox:CaptureFocus()
        Explorer.Refresh()
    end

    Explorer.SetSortingEnabled = function(val)
        sortingEnabled = val
        Settings.Explorer.Sorting = val
    end

    Explorer.UpdateView = function()
        local maxNodes = math.ceil(treeFrame.AbsoluteSize.Y / 20)
        local maxX = treeFrame.AbsoluteSize.X
        local totalWidth = Explorer.ViewWidth + Explorer.FreeWidth

        scrollV.VisibleSpace = maxNodes
        scrollV.TotalSpace = #tree + 1
        scrollH.VisibleSpace = maxX
        scrollH.TotalSpace = totalWidth

        scrollV.Gui.Visible = #tree + 1 > maxNodes
        scrollH.Gui.Visible = totalWidth > maxX

        local oldSize = treeFrame.Size
        treeFrame.Size = UDim2.new(1,(scrollV.Gui.Visible and -16 or 0),1,(scrollH.Gui.Visible and -39 or -23))
        if oldSize ~= treeFrame.Size then
            Explorer.UpdateView()
        else
            scrollV:Update()
            scrollH:Update()

            renameBox.Size = UDim2.new(0,maxX-100,0,16)

            if scrollV.Gui.Visible and scrollH.Gui.Visible then
                scrollV.Gui.Size = UDim2.new(0,16,1,-39)
                scrollH.Gui.Size = UDim2.new(1,-16,0,16)
                Explorer.Window.GuiElems.Content.ScrollCorner.Visible = true
            else
                scrollV.Gui.Size = UDim2.new(0,16,1,-23)
                scrollH.Gui.Size = UDim2.new(1,0,0,16)
                Explorer.Window.GuiElems.Content.ScrollCorner.Visible = false
            end

            Explorer.Index = scrollV.Index
        end
    end

    Explorer.NodeSorter = function(a,b)
        if a.Del or b.Del then return false end -- Ghost node

        local aClass = a.Class
        local bClass = b.Class
        if not aClass then aClass = a.Obj.ClassName a.Class = aClass end
        if not bClass then bClass = b.Obj.ClassName b.Class = bClass end

        local aOrder = explorerOrders[aClass]
        local bOrder = explorerOrders[bClass]
        if not aOrder then aOrder = RMD.Classes[aClass] and tonumber(RMD.Classes[aClass].ExplorerOrder) or 9999 explorerOrders[aClass] = aOrder end
        if not bOrder then bOrder = RMD.Classes[bClass] and tonumber(RMD.Classes[bClass].ExplorerOrder) or 9999 explorerOrders[bClass] = bOrder end

        if aOrder ~= bOrder then
            return aOrder < bOrder
        else
            local aName,bName = tostring(a.Obj),tostring(b.Obj)
            if aName ~= bName then
                return aName < bName
            elseif aClass ~= bClass then
                return aClass < bClass
            else
                local aId = a.Id if not aId then aId = idCounter idCounter = (idCounter+0.001)%999999999 a.Id = aId end
                local bId = b.Id if not bId then bId = idCounter idCounter = (idCounter+0.001)%999999999 b.Id = bId end
                return aId < bId
            end
        end
    end

    Explorer.Update = function()
        table.clear(tree)
        local maxNameWidth,maxDepth,count = 0,1,1
        local nameCache = {}
        local font = Enum.Font.SourceSans
        local size = Vector2.new(math.huge,20)
        local useNameWidth = Settings.Explorer.UseNameWidth
        local tSort = table.sort
        local sortFunc = Explorer.NodeSorter
        local isSearching = (expanded == Explorer.SearchExpanded)
        local textServ = service.TextService

        local function recur(root,depth)
            if depth > maxDepth then maxDepth = depth end
            depth = depth + 1
            if sortingEnabled and not root.Sorted then
                tSort(root,sortFunc)
                root.Sorted = true
            end
            for i = 1,#root do
                local n = root[i]

                if (isSearching and not searchResults[n]) or n.Del then continue end

                if useNameWidth then
                    local nameWidth = n.NameWidth
                    if not nameWidth then
                        local objName = tostring(n.Obj)
                        nameWidth = nameCache[objName]
                        if not nameWidth then
                            nameWidth = getTextSize(textServ,objName,14,font,size).X
                            nameCache[objName] = nameWidth
                        end
                        n.NameWidth = nameWidth
                    end
                    if nameWidth > maxNameWidth then
                        maxNameWidth = nameWidth
                    end
                end

                tree[count] = n
                count = count + 1
                if expanded[n] and #n > 0 then
                    recur(n,depth)
                end
            end
        end

        recur(nodes[game],1)

        -- Nil Instances
        if env.getnilinstances then
            if not (isSearching and not searchResults[nilNode]) then
                tree[count] = nilNode
                count = count + 1
                if expanded[nilNode] then
                    recur(nilNode,2)
                end
            end
        end

        Explorer.MaxNameWidth = maxNameWidth
        Explorer.MaxDepth = maxDepth
        Explorer.ViewWidth = useNameWidth and Explorer.EntryIndent*maxDepth + maxNameWidth + 26 or Explorer.EntryIndent*maxDepth + 226
        Explorer.UpdateView()
    end

    Explorer.StartDrag = function(offX,offY)
        if Explorer.Dragging then return end
        for i,v in next, selection.List do
            local Obj = v.Obj
            if Obj.Parent == game or Obj:IsA("Player") then
                return
            end
        end
        Explorer.Dragging = true
        
        local dragTree = treeFrame:Clone()
        dragTree:ClearAllChildren()
        
        for i,v in pairs(listEntries) do
            local node = tree[i + Explorer.Index]
            if node and selection.Map[node] then
                local clone = v:Clone()
                clone.Active = false
                clone.Indent.Expand.Visible = false
                clone.Parent = dragTree
            end
        end

        local newGui = Instance.new("ScreenGui")
        newGui.DisplayOrder = Main.DisplayOrders.Menu
        dragTree.Parent = newGui
        Lib.ShowGui(newGui)

        local dragOutline = create({
            {1,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="DragSelect",Size=UDim2.new(1,0,1,0),}},
            {2,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Size=UDim2.new(1,0,0,1),ZIndex=2,}},
            {3,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Position=UDim2.new(0,0,1,-1),Size=UDim2.new(1,0,0,1),ZIndex=2,}},
            {4,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Size=UDim2.new(0,1,1,0),ZIndex=2,}},
            {5,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Position=UDim2.new(1,-1,0,0),Size=UDim2.new(0,1,1,0),ZIndex=2,}},
        })
        dragOutline.Parent = treeFrame
        
        local mouse = Main.Mouse or service.Players.LocalPlayer:GetMouse()
        local function move()
            local posX = mouse.X - offX
            local posY = mouse.Y - offY
            dragTree.Position = UDim2.new(0,posX,0,posY)

            for i = 1,#listEntries do
                local entry = listEntries[i]
                if Lib.CheckMouseInGui(entry) then
                    dragOutline.Position = UDim2.new(0,entry.Indent.Position.X.Offset-scrollH.Index,0,entry.Position.Y.Offset)
                    dragOutline.Size = UDim2.new(0,entry.Size.X.Offset-entry.Indent.Position.X.Offset,0,20)
                    dragOutline.Visible = true
                    return
                end
            end
            dragOutline.Visible = false
        end
        move()

        local input = service.UserInputService
        local mouseEvent,releaseEvent
        
        mouseEvent = input.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
